на счет этого раздела:
### Неделя 1: Введение в FastAPI и базовая настройка
и пунктов 2 и 3:
2. **Первая программа на FastAPI** (1 час)  
   - Создание минимального приложения. 
   - Запуск с помощью Uvicorn.  
3. **Обработка запросов и ответов** (2 часа)  
   - Методы HTTP: GET, POST, PUT, DELETE.  
   - Маршруты, параметры URL и запросов, тело запроса.

напиши для меня подробный материал - теорию и практическую часть, чтобы я мог по нему отработать этот пункт.

=========================================================

### Материал для пунктов 2 и 3: Введение в FastAPI  

---

### Пункт 2: Первая программа на FastAPI  

#### Теория  
FastAPI позволяет легко и быстро создавать API-приложения. Минимальная программа состоит из создания экземпляра `FastAPI` и регистрации одного или нескольких маршрутов (routes).  

#### Практическая часть  

1. **Создание минимального приложения**  
   - Создайте файл `main.py` и добавьте в него следующий код:  
     ```python
     from fastapi import FastAPI

     app = FastAPI()  # Создаем экземпляр FastAPI

     @app.get("/")
     def read_root():
         return {"message": "Welcome to FastAPI!"}  # Ответ в формате JSON
     ```
     Здесь:  
     - `app.get("/")` — регистрирует маршрут `GET /`.  
     - `read_root()` — функция-обработчик для маршрута, возвращает JSON-ответ.  

2. **Запуск приложения с помощью Uvicorn**  
   В терминале выполните команду:  
   ```bash
   uvicorn main:app --reload
   ```
   - `main:app` указывает файл `main.py` и объект `app`.  
   - Флаг `--reload` автоматически перезапускает сервер при изменении кода.  

3. **Откройте приложение в браузере**  
   Перейдите по адресу [http://127.0.0.1:8000](http://127.0.0.1:8000), и вы увидите:  
   ```json
   {"message": "Welcome to FastAPI!"}
   ```
   Документация доступна по адресам:  
   - Swagger UI: [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs).  
   - ReDoc: [http://127.0.0.1:8000/redoc](http://127.0.0.1:8000/redoc).  

---

### Пункт 3: Обработка запросов и ответов  

#### Теория  

1. **Методы HTTP**  
   В FastAPI можно обрабатывать запросы с использованием различных HTTP-методов:  
   - `GET`: Запрос данных.  
   - `POST`: Отправка данных для создания нового ресурса.  
   - `PUT`: Обновление существующего ресурса.  
   - `DELETE`: Удаление ресурса.  

2. **Маршруты и параметры**  
   - **Параметры URL:** Передаются в строке запроса, например: `/items/1`.  
   - **Параметры запроса (Query):** Передаются после `?`, например: `/items?name=apple`.  
   - **Тело запроса:** Используется для передачи сложных структур данных (например, JSON).  

---

#### Практическая часть  

1. **Создание маршрутов с разными методами HTTP**  
   Расширьте `main.py`:  
   ```python
   from fastapi import FastAPI

   app = FastAPI()

   @app.get("/")
   def read_root():
       return {"message": "Welcome to FastAPI!"}

   @app.get("/items/{item_id}")
   def read_item(item_id: int, q: str = None):
       return {"item_id": item_id, "q": q}

   @app.post("/items/")
   def create_item(item: dict):
       return {"item": item}

   @app.put("/items/{item_id}")
   def update_item(item_id: int, item: dict):
       return {"item_id": item_id, "updated_item": item}

   @app.delete("/items/{item_id}")
   def delete_item(item_id: int):
       return {"item_id": item_id, "status": "deleted"}
   ```

2. **Описание кода:**  
   - `@app.get("/items/{item_id}")`:  
     - Параметр `item_id` передается через URL.  
     - `q` — необязательный параметр запроса (query parameter).  
   - `@app.post("/items/")`:  
     - Данные передаются через тело запроса в формате JSON.  
   - `@app.put("/items/{item_id}")`:  
     - Обновляет ресурс, используя данные из URL и тела запроса.  
   - `@app.delete("/items/{item_id}")`:  
     - Удаляет ресурс по идентификатору из URL.  

3. **Тестирование маршрутов**  
   - Используйте Swagger UI ([http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs)) для тестирования.  
   - Примеры запросов через `curl` или Postman:  
     ```bash
     curl -X GET "http://127.0.0.1:8000/items/1?q=test"
     curl -X POST "http://127.0.0.1:8000/items/" -H "Content-Type: application/json" -d '{"name": "apple"}'
     curl -X PUT "http://127.0.0.1:8000/items/1" -H "Content-Type: application/json" -d '{"name": "updated_apple"}'
     curl -X DELETE "http://127.0.0.1:8000/items/1"
     ```

---

### Контрольные вопросы  

1. Какой метод HTTP используется для:  
   - получения данных?  
   - создания нового ресурса?  
   - обновления ресурса?  
   - удаления ресурса?  

2. Чем отличаются параметры URL и параметры запроса (query)?  

3. Как передать данные через тело запроса?  

4. Что произойдет, если параметр URL не совпадет с маршрутом?  

---

Если нужно подробнее разобрать какой-то аспект, напишите!